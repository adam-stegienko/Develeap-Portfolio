name: Docker Image CI

on:
  push:
    branches:
    - main

concurrency: production
jobs:

  build-and-publish:

    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:  
    - uses: actions/checkout@v3
    - name: Checkout
      run: echo "Repository checked out."

    - name: Latest app version
      run: APP_VERSION="latest"

    # - name: Fetch tags
    #   run: |
    #     git checkout main
    #     git remote set-url origin git@github.com:adam-stegienko/Develeap-Portfolio.git
    #     git pull --rebase
    #     git fetch --tags

    - name: Semantic versioning (x.y.z)
      run: |
        LATEST_TAG="$(git tag | sort -V | tail -1 || true)"

        UPDATE_CHECKER="$(git log --format="medium" -1)"
        MAJOR_UPDATE="$(echo $UPDATE_CHECKER | grep '#major' || true)"
        MINOR_UPDATE="$(echo $UPDATE_CHECKER | grep '#minor' || true)"
        
        NEW_MAJOR=$(echo "${LATEST_TAG}" | cut -d "." -f 1)
        NEW_MINOR=$(echo "${LATEST_TAG}" | cut -d "." -f 2)
        NEW_PATCH=$(echo "${LATEST_TAG}" | cut -d "." -f 3)

        if [[ $MAJOR_UPDATE ]]; then
          NEW_MAJOR=$(expr $NEW_MAJOR + 1)
        elif [[ $MINOR_UPDATE ]]; then
          NEW_MINOR=$(expr $NEW_MINOR + 1)
        else
          NEW_PATCH=$(expr $NEW_PATCH + 1)
        fi

        NEW_TAG="${NEW_MAJOR}.{NEW_MINOR}.{NEW_PATCH}"
        APP_VERSION=$NEW_TAG
        echo "The new tag for release on main branch is '$NEW_TAG'"
        echo "The tag used for pipeline operations will be '$APP_VERSION'"

    - name: Env file creation
      run: |
        cat << EOF > .env
        APP_VERSION: ${APP_VERSION}
        DB_VERSION: 2022-latest
        DB_PORT_IN: 1433
        DB_PORT_OUT: 1433
        ACCEPT_EULA: Y
        MSSQL_SA_USER: ${{ secrets.MSSQL_SA_USER }}
        MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
        MSSQL_PID: Developer
        DATA_VOLUME: /var/opt/mssql
        MSSQL_DB: ${{ secrets.MSSQL_DB }}
        MSSQL_USER: ${{ secrets.MSSQL_USER }}
        MSSQL_PASSWORD: ${{ secrets.MSSQL_PASSWORD }}
        MSSQL_SERVER: mssql_server
        DRIVER: FreeTDS
        PROTOCOL: mssql+pyodbc
        OPTIONS: 'TDS_Version=8.0'  
        EOF
    
    - name: Values import
      run: |
        # Import .env values
        echo -e "\n--------------------------------------- IMPORTING ENV FILE ---------------------------------------\n"
        if [ -f .env ]
            then
                export $(grep -v '^#' .env | xargs)
                echo "Values from .env file sourced successfully."
            else
                echo "No .env file provided."
                exit 1
        fi

    - name: Docker image build
      run: |
        # Build the image
        echo -e "\n---------------------------------------- BUILDING APP IMAGE --------------------------------------\n"
        docker build -t digital_planner:latest .

    - name: Set-up recreation
      run: |
        docker compose up --detach
        sleep 2
        
    - name: Logs
      run: |
        # Check start-up logs
        echo -e "\n----------------------------------------- DATABASE LOGS ------------------------------------------\n"
        docker logs mssql_server
        sleep 2
        echo -e "\n---------------------------------------- APPLICATION LOGS ----------------------------------------\n"
        docker logs digital_planner
        sleep 2
        echo -e "\n--------------------------------------- REVERSE PROXY LOGS ---------------------------------------\n"
        docker logs reverse_nginx
        sleep 2

    - name: Unit testing
      run: |
        # Perform unit tests
        echo -e "\n--------------------------------------- RUNNING UNIT TESTS ----------------------------------------n"
        command ./unit_tests.sh
        
    - name: Tagging and pushing to GitHub Repo
      run: |
        git clean -f -x
        git tag -a $NEW_TAG -m "New ${NEW_TAG} tag added to latest commit on branch main"
        git push origin main --tag

    - name: Env file deletion
      run: |
        rm .env

    - name: Ready for publish
      run: |
        echo "The image version ${APP_VERSION} is ready for publishing now."
